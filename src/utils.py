# -*- coding: utf-8 -*-
"""utils.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EA7H-EtMaEcjWN0v9-fSVGwU2jdjgmC2
"""

import torch
from tqdm import tqdm
from sklearn.metrics import accuracy_score, f1_score, classification_report


def save_checkpoint(model, optimizer, scheduler, epoch, loss, filename):
    """ Save model weights, optimizer state, and scheduler state """
    checkpoint = {
        'epoch': epoch,
        'model_state_dict': model.state_dict(),
        'optimizer_state_dict': optimizer.state_dict(),
        'scheduler_state_dict': scheduler.state_dict(),
        'loss': loss
    }
    torch.save(checkpoint, filename)
    print(f"Checkpoint saved at {filename}")

def load_checkpoint(model, optimizer, scheduler, filename):
    """ Load the checkpoint and resume training """
    checkpoint = torch.load(filename)
    model.load_state_dict(checkpoint['model_state_dict'])
    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
    scheduler.load_state_dict(checkpoint['scheduler_state_dict'])
    epoch = checkpoint['epoch']
    loss = checkpoint['loss']
    print(f"Checkpoint loaded from {filename}")
    return model, optimizer, scheduler, epoch, loss

def test_model(model, loader, criterion):
    model.eval()
    running_loss = 0.0
    all_labels = []
    all_preds = []

    loop = tqdm(loader, desc="Testing", leave=False)

    with torch.no_grad():
        for batch_idx, (X_batch, y_batch) in enumerate(loop):
            X_batch, y_batch = X_batch.to(device), y_batch.to(device)

            with torch.cuda.amp.autocast():
                y_pred = model(X_batch)
                loss = criterion(y_pred, y_batch)

            running_loss += loss.item()

            _, predicted = torch.max(y_pred, 1)
            all_preds.extend(predicted.cpu().numpy())
            all_labels.extend(y_batch.cpu().numpy())

            loop.set_postfix(loss=running_loss / (batch_idx + 1))

    avg_loss = running_loss / len(loader)
    print(f"Average Test Loss: {avg_loss:.4f}")

    accuracy = accuracy_score(all_labels, all_preds)
    f1 = f1_score(all_labels, all_preds, average='weighted')
    class_report = classification_report(all_labels, all_preds, target_names=loader.dataset.classes)

    print(f"Accuracy: {accuracy:.4f}")
    print(f"Weighted F1-Score: {f1:.4f}")
    print("\nClassification Report:\n", class_report)

    return avg_loss, accuracy, f1, class_report